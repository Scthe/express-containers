"use strict";(()=>{var E="is-quick-js",a="1",u={WORKER_REQUEST:"WORKER_REQUEST",HOST_RESPONSE:"HOST_RESPONSE"};var o=(...e)=>console.log("[Service Worker]",...e),c=self;c.addEventListener("install",function(e){o("Service worker installed"),c.skipWaiting()});c.addEventListener("fetch",function(e){if(o(`Fetch request: '${e.request.url}'`),!l(e.request))return;o(`It's QuickJS request: '${e.request.url}'`);let t=d(e);e.respondWith(t)});function l(e){let t=e.headers.get(E)===a,s=e.url.includes(`${E}=${a}`),r=e.referrer.includes(`${E}=${a}`);return t||s||r}var i={};function d(e){let t=e.request.url;return new Promise((s,r)=>{let R=i[t]||[];i[t]=R,R.push(n=>{let S=typeof n?.data=="string"?n.data:"(invalid response data)",p=new Response(S,{status:n?.statusCode||500,headers:n?.headers||{}});s(p)}),f(t)})}async function f(e){let s=await c.clients.matchAll({includeUncontrolled:!0})||[];o(`Post request to host url='${e}' to ${s.length} clients`),s.forEach(r=>{r.postMessage({type:u.WORKER_REQUEST,url:e})})}c.addEventListener("message",e=>{if(o("Handle message",e.data),e.data&&e.data.type===u.HOST_RESPONSE){let t=e.data,{url:s,resp:r}=t,R=i[s];i[s]=[],R.forEach(n=>n(r))}});})();
//# sourceMappingURL=service-worker.js.map
